{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","NegociacaoDao","ConnectionFactory","Negociacao","NegociacaoService","_httpService","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","todasNegociacoes","listaNegociacoes","concat","erro","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"./HttpService\";\r\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { Negociacao } from '../models/Negociacao'\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return this._httpService.get('negociacoes/semana')\r\n            .then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível obter as negociações da semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return this._httpService.get('negociacoes/anterior')\r\n                .then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                .catch(erro => {\r\n                    throw new Error('Não foi possível obter as negociações da semana anterior');\r\n                });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return this._httpService.get('negociacoes/retrasada')\r\n                .then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                .catch(erro => {\r\n                    throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n                });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n                this.obterNegociacoesDaSemana(),\r\n                this.obterNegociacoesDaSemanaAnterior(),\r\n                this.obterNegociacoesDaSemanaRetrasada(),\r\n            ])\r\n            .then(negociacoes => negociacoes.reduce((todasNegociacoes, listaNegociacoes) => todasNegociacoes.concat(listaNegociacoes), []))\r\n            .catch(erro => {\r\n                throw new Error(erro)\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso!')\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível obter as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente => \r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível importar as negociações');\r\n            });\r\n    }\r\n\r\n}"]}